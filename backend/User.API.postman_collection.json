{
	"info": {
		"_postman_id": "7b2f9c4d-8e1a-4c2b-9f3e-1a2b3c4d5e6f",
		"name": "Marketplace User API",
		"description": "Collection for testing the User service API endpoints in the marketplace platform",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "12345678"
	},
	"item": [
		{
			"name": "User Management",
			"item": [
				{
					"name": "Create User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response has user data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('email');",
									"    pm.expect(jsonData).to.have.property('username');",
									"    pm.expect(jsonData).to.have.property('firstName');",
									"    pm.expect(jsonData).to.have.property('lastName');",
									"    pm.expect(jsonData).to.have.property('createdAt');",
									"    ",
									"    // Store user ID for other requests",
									"    pm.collectionVariables.set('userId', jsonData.id);",
									"    pm.collectionVariables.set('userEmail', jsonData.email);",
									"    pm.collectionVariables.set('username', jsonData.username);",
									"});",
									"",
									"pm.test(\"Location header is present\", function () {",
									"    pm.response.to.have.header('Location');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"{{$randomEmail}}\",\n  \"username\": \"{{$randomUserName}}\",\n  \"firstName\": \"{{$randomFirstName}}\",\n  \"lastName\": \"{{$randomLastName}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users"
							]
						},
						"description": "Creates a new user account. This endpoint is publicly accessible (no authentication required)."
					}
				},
				{
					"name": "Create User - Duplicate Email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 409 Conflict\", function () {",
									"    pm.response.to.have.status(409);",
									"});",
									"",
									"pm.test(\"Error message mentions email\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.include('email');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"{{userEmail}}\",\n  \"username\": \"different_username\",\n  \"firstName\": \"Test\",\n  \"lastName\": \"User\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users"
							]
						},
						"description": "Attempts to create a user with an already existing email address to test conflict handling."
					}
				},
				{
					"name": "Create User - Invalid Data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Validation errors are returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData.message).to.include('Validation failed');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"invalid-email\",\n  \"username\": \"ab\",\n  \"firstName\": \"\",\n  \"lastName\": \"\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users"
							]
						},
						"description": "Tests validation by sending invalid data (invalid email, short username, empty names)."
					}
				},
				{
					"name": "Get User by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains user data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('email');",
									"    pm.expect(jsonData).to.have.property('username');",
									"    pm.expect(jsonData).to.have.property('firstName');",
									"    pm.expect(jsonData).to.have.property('lastName');",
									"    pm.expect(jsonData).to.have.property('isActive');",
									"    pm.expect(jsonData).to.have.property('createdAt');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwtToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/users/{{userId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{userId}}"
							]
						},
						"description": "Retrieves user information by user ID. Requires JWT authentication."
					}
				},
				{
					"name": "Get User by ID - No Auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401 Unauthorized\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/users/{{userId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{userId}}"
							]
						},
						"description": "Tests that authentication is required for getting user by ID."
					}
				},
				{
					"name": "Get User by Email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Correct user is returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.email).to.eql(pm.collectionVariables.get('userEmail'));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwtToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/users/email/{{userEmail}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								"email",
								"{{userEmail}}"
							]
						},
						"description": "Retrieves user information by email address. Requires JWT authentication."
					}
				},
				{
					"name": "Get User by Username",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Correct user is returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.username).to.eql(pm.collectionVariables.get('username'));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwtToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/users/username/{{username}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								"username",
								"{{username}}"
							]
						},
						"description": "Retrieves user information by username. Requires JWT authentication."
					}
				},
				{
					"name": "Update User Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Profile is updated\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.firstName).to.eql('Updated');",
									"    pm.expect(jsonData.lastName).to.eql('Name');",
									"    pm.expect(jsonData).to.have.property('updatedAt');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwtToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"Updated\",\n  \"lastName\": \"Name\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/users/{{userId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{userId}}"
							]
						},
						"description": "Updates user profile information (first name and last name). Requires JWT authentication."
					}
				},
				{
					"name": "Update User - Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404 Not Found\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwtToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"Test\",\n  \"lastName\": \"User\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/users/00000000-0000-0000-0000-000000000000",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								"00000000-0000-0000-0000-000000000000"
							]
						},
						"description": "Tests updating a non-existent user to verify 404 handling."
					}
				},
				{
					"name": "Deactivate User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204 No Content\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwtToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/users/{{userId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{userId}}"
							]
						},
						"description": "Deactivates a user account. The user is not physically deleted but marked as inactive. Requires JWT authentication."
					}
				},
				{
					"name": "Verify User Deactivated",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"User is inactive\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.isActive).to.be.false;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwtToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/users/{{userId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{userId}}"
							]
						},
						"description": "Verifies that the user has been deactivated by checking the isActive flag."
					}
				}
			],
			"description": "Core user management operations including creation, retrieval, updates, and deactivation."
		},
		{
			"name": "Health & Info",
			"item": [
				{
					"name": "API Health Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"API is reachable\", function () {",
									"    pm.response.to.not.have.status(500);",
									"    pm.response.to.not.have.status(503);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/users/00000000-0000-0000-0000-000000000000",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								"00000000-0000-0000-0000-000000000000"
							]
						},
						"description": "Basic health check to verify the API is responding. Should return 401 (unauthorized) if API is healthy."
					}
				},
				{
					"name": "OpenAPI Spec",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/swagger/v1/swagger.json",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"swagger",
								"v1",
								"swagger.json"
							]
						},
						"description": "Retrieves the OpenAPI/Swagger specification for the API."
					}
				}
			],
			"description": "Health checks and API information endpoints."
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Generate JWT token for testing (development only)",
					"// In production, you would get this from Keycloak",
					"if (!pm.collectionVariables.get('jwtToken')) {",
					"    const header = {",
					"        'alg': 'HS256',",
					"        'typ': 'JWT'",
					"    };",
					"    ",
					"    const payload = {",
					"        'sub': '1234567890',",
					"        'name': 'Test User',",
					"        'iat': Math.floor(Date.now() / 1000),",
					"        'exp': Math.floor(Date.now() / 1000) + (60 * 60), // 1 hour",
					"        'iss': 'marketplace-api-dev',",
					"        'aud': 'marketplace-client-dev'",
					"    };",
					"    ",
					"    const secret = 'development-256-bit-secret-key-for-local-testing-only-not-for-production';",
					"    ",
					"    // Simple JWT creation for testing",
					"    function base64UrlEncode(str) {",
					"        return btoa(JSON.stringify(str))",
					"            .replace(/\\+/g, '-')",
					"            .replace(/\\//g, '_')",
					"            .replace(/=/g, '');",
					"    }",
					"    ",
					"    const encodedHeader = base64UrlEncode(header);",
					"    const encodedPayload = base64UrlEncode(payload);",
					"    ",
					"    // For demo purposes, using a simple signature",
					"    // In real scenarios, use proper HMAC-SHA256",
					"    const signature = 'demo-signature';",
					"    ",
					"    const jwt = `${encodedHeader}.${encodedPayload}.${signature}`;",
					"    pm.collectionVariables.set('jwtToken', jwt);",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:5001",
			"type": "string",
			"description": "Base URL for the User API service"
		},
		{
			"key": "jwtToken",
			"value": "",
			"type": "string",
			"description": "JWT token for authenticated requests"
		},
		{
			"key": "userId",
			"value": "",
			"type": "string",
			"description": "ID of created user for testing"
		},
		{
			"key": "userEmail",
			"value": "",
			"type": "string",
			"description": "Email of created user for testing"
		},
		{
			"key": "username",
			"value": "",
			"type": "string",
			"description": "Username of created user for testing"
		}
	]
}